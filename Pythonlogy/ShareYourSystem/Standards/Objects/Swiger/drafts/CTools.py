# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CTools', [dirname(__file__)])
        except ImportError:
            import _CTools
            return _CTools
        if fp is not None:
            try:
                _mod = imp.load_module('_CTools', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CTools = swig_import_helper()
    del swig_import_helper
else:
    import _CTools
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CTools.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _CTools.SwigPyIterator_value(self)
    def incr(self, n=1): return _CTools.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _CTools.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _CTools.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _CTools.SwigPyIterator_equal(self, *args)
    def copy(self): return _CTools.SwigPyIterator_copy(self)
    def next(self): return _CTools.SwigPyIterator_next(self)
    def __next__(self): return _CTools.SwigPyIterator___next__(self)
    def previous(self): return _CTools.SwigPyIterator_previous(self)
    def advance(self, *args): return _CTools.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _CTools.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _CTools.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _CTools.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _CTools.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _CTools.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _CTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _CTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.IntVector___nonzero__(self)
    def __bool__(self): return _CTools.IntVector___bool__(self)
    def __len__(self): return _CTools.IntVector___len__(self)
    def pop(self): return _CTools.IntVector_pop(self)
    def __getslice__(self, *args): return _CTools.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CTools.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CTools.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CTools.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CTools.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CTools.IntVector___setitem__(self, *args)
    def append(self, *args): return _CTools.IntVector_append(self, *args)
    def empty(self): return _CTools.IntVector_empty(self)
    def size(self): return _CTools.IntVector_size(self)
    def clear(self): return _CTools.IntVector_clear(self)
    def swap(self, *args): return _CTools.IntVector_swap(self, *args)
    def get_allocator(self): return _CTools.IntVector_get_allocator(self)
    def begin(self): return _CTools.IntVector_begin(self)
    def end(self): return _CTools.IntVector_end(self)
    def rbegin(self): return _CTools.IntVector_rbegin(self)
    def rend(self): return _CTools.IntVector_rend(self)
    def pop_back(self): return _CTools.IntVector_pop_back(self)
    def erase(self, *args): return _CTools.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CTools.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CTools.IntVector_push_back(self, *args)
    def front(self): return _CTools.IntVector_front(self)
    def back(self): return _CTools.IntVector_back(self)
    def assign(self, *args): return _CTools.IntVector_assign(self, *args)
    def resize(self, *args): return _CTools.IntVector_resize(self, *args)
    def insert(self, *args): return _CTools.IntVector_insert(self, *args)
    def reserve(self, *args): return _CTools.IntVector_reserve(self, *args)
    def capacity(self): return _CTools.IntVector_capacity(self)
    __swig_destroy__ = _CTools.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _CTools.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.DoubleVector___nonzero__(self)
    def __bool__(self): return _CTools.DoubleVector___bool__(self)
    def __len__(self): return _CTools.DoubleVector___len__(self)
    def pop(self): return _CTools.DoubleVector_pop(self)
    def __getslice__(self, *args): return _CTools.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CTools.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CTools.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CTools.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CTools.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CTools.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _CTools.DoubleVector_append(self, *args)
    def empty(self): return _CTools.DoubleVector_empty(self)
    def size(self): return _CTools.DoubleVector_size(self)
    def clear(self): return _CTools.DoubleVector_clear(self)
    def swap(self, *args): return _CTools.DoubleVector_swap(self, *args)
    def get_allocator(self): return _CTools.DoubleVector_get_allocator(self)
    def begin(self): return _CTools.DoubleVector_begin(self)
    def end(self): return _CTools.DoubleVector_end(self)
    def rbegin(self): return _CTools.DoubleVector_rbegin(self)
    def rend(self): return _CTools.DoubleVector_rend(self)
    def pop_back(self): return _CTools.DoubleVector_pop_back(self)
    def erase(self, *args): return _CTools.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CTools.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CTools.DoubleVector_push_back(self, *args)
    def front(self): return _CTools.DoubleVector_front(self)
    def back(self): return _CTools.DoubleVector_back(self)
    def assign(self, *args): return _CTools.DoubleVector_assign(self, *args)
    def resize(self, *args): return _CTools.DoubleVector_resize(self, *args)
    def insert(self, *args): return _CTools.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _CTools.DoubleVector_reserve(self, *args)
    def capacity(self): return _CTools.DoubleVector_capacity(self)
    __swig_destroy__ = _CTools.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _CTools.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.DoubleVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.DoubleVectorVector___nonzero__(self)
    def __bool__(self): return _CTools.DoubleVectorVector___bool__(self)
    def __len__(self): return _CTools.DoubleVectorVector___len__(self)
    def pop(self): return _CTools.DoubleVectorVector_pop(self)
    def __getslice__(self, *args): return _CTools.DoubleVectorVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CTools.DoubleVectorVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CTools.DoubleVectorVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CTools.DoubleVectorVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CTools.DoubleVectorVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CTools.DoubleVectorVector___setitem__(self, *args)
    def append(self, *args): return _CTools.DoubleVectorVector_append(self, *args)
    def empty(self): return _CTools.DoubleVectorVector_empty(self)
    def size(self): return _CTools.DoubleVectorVector_size(self)
    def clear(self): return _CTools.DoubleVectorVector_clear(self)
    def swap(self, *args): return _CTools.DoubleVectorVector_swap(self, *args)
    def get_allocator(self): return _CTools.DoubleVectorVector_get_allocator(self)
    def begin(self): return _CTools.DoubleVectorVector_begin(self)
    def end(self): return _CTools.DoubleVectorVector_end(self)
    def rbegin(self): return _CTools.DoubleVectorVector_rbegin(self)
    def rend(self): return _CTools.DoubleVectorVector_rend(self)
    def pop_back(self): return _CTools.DoubleVectorVector_pop_back(self)
    def erase(self, *args): return _CTools.DoubleVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CTools.new_DoubleVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CTools.DoubleVectorVector_push_back(self, *args)
    def front(self): return _CTools.DoubleVectorVector_front(self)
    def back(self): return _CTools.DoubleVectorVector_back(self)
    def assign(self, *args): return _CTools.DoubleVectorVector_assign(self, *args)
    def resize(self, *args): return _CTools.DoubleVectorVector_resize(self, *args)
    def insert(self, *args): return _CTools.DoubleVectorVector_insert(self, *args)
    def reserve(self, *args): return _CTools.DoubleVectorVector_reserve(self, *args)
    def capacity(self): return _CTools.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _CTools.delete_DoubleVectorVector
    __del__ = lambda self : None;
DoubleVectorVector_swigregister = _CTools.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.StringVector___nonzero__(self)
    def __bool__(self): return _CTools.StringVector___bool__(self)
    def __len__(self): return _CTools.StringVector___len__(self)
    def pop(self): return _CTools.StringVector_pop(self)
    def __getslice__(self, *args): return _CTools.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CTools.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CTools.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CTools.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CTools.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CTools.StringVector___setitem__(self, *args)
    def append(self, *args): return _CTools.StringVector_append(self, *args)
    def empty(self): return _CTools.StringVector_empty(self)
    def size(self): return _CTools.StringVector_size(self)
    def clear(self): return _CTools.StringVector_clear(self)
    def swap(self, *args): return _CTools.StringVector_swap(self, *args)
    def get_allocator(self): return _CTools.StringVector_get_allocator(self)
    def begin(self): return _CTools.StringVector_begin(self)
    def end(self): return _CTools.StringVector_end(self)
    def rbegin(self): return _CTools.StringVector_rbegin(self)
    def rend(self): return _CTools.StringVector_rend(self)
    def pop_back(self): return _CTools.StringVector_pop_back(self)
    def erase(self, *args): return _CTools.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CTools.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CTools.StringVector_push_back(self, *args)
    def front(self): return _CTools.StringVector_front(self)
    def back(self): return _CTools.StringVector_back(self)
    def assign(self, *args): return _CTools.StringVector_assign(self, *args)
    def resize(self, *args): return _CTools.StringVector_resize(self, *args)
    def insert(self, *args): return _CTools.StringVector_insert(self, *args)
    def reserve(self, *args): return _CTools.StringVector_reserve(self, *args)
    def capacity(self): return _CTools.StringVector_capacity(self)
    __swig_destroy__ = _CTools.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _CTools.StringVector_swigregister
StringVector_swigregister(StringVector)

class MapStringInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.MapStringInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.MapStringInt___nonzero__(self)
    def __bool__(self): return _CTools.MapStringInt___bool__(self)
    def __len__(self): return _CTools.MapStringInt___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _CTools.MapStringInt___getitem__(self, *args)
    def __delitem__(self, *args): return _CTools.MapStringInt___delitem__(self, *args)
    def has_key(self, *args): return _CTools.MapStringInt_has_key(self, *args)
    def keys(self): return _CTools.MapStringInt_keys(self)
    def values(self): return _CTools.MapStringInt_values(self)
    def items(self): return _CTools.MapStringInt_items(self)
    def __contains__(self, *args): return _CTools.MapStringInt___contains__(self, *args)
    def key_iterator(self): return _CTools.MapStringInt_key_iterator(self)
    def value_iterator(self): return _CTools.MapStringInt_value_iterator(self)
    def __setitem__(self, *args): return _CTools.MapStringInt___setitem__(self, *args)
    def asdict(self): return _CTools.MapStringInt_asdict(self)
    def __init__(self, *args): 
        this = _CTools.new_MapStringInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _CTools.MapStringInt_empty(self)
    def size(self): return _CTools.MapStringInt_size(self)
    def clear(self): return _CTools.MapStringInt_clear(self)
    def swap(self, *args): return _CTools.MapStringInt_swap(self, *args)
    def get_allocator(self): return _CTools.MapStringInt_get_allocator(self)
    def begin(self): return _CTools.MapStringInt_begin(self)
    def end(self): return _CTools.MapStringInt_end(self)
    def rbegin(self): return _CTools.MapStringInt_rbegin(self)
    def rend(self): return _CTools.MapStringInt_rend(self)
    def count(self, *args): return _CTools.MapStringInt_count(self, *args)
    def erase(self, *args): return _CTools.MapStringInt_erase(self, *args)
    def find(self, *args): return _CTools.MapStringInt_find(self, *args)
    def lower_bound(self, *args): return _CTools.MapStringInt_lower_bound(self, *args)
    def upper_bound(self, *args): return _CTools.MapStringInt_upper_bound(self, *args)
    __swig_destroy__ = _CTools.delete_MapStringInt
    __del__ = lambda self : None;
MapStringInt_swigregister = _CTools.MapStringInt_swigregister
MapStringInt_swigregister(MapStringInt)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.MapStringString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.MapStringString___nonzero__(self)
    def __bool__(self): return _CTools.MapStringString___bool__(self)
    def __len__(self): return _CTools.MapStringString___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _CTools.MapStringString___getitem__(self, *args)
    def __delitem__(self, *args): return _CTools.MapStringString___delitem__(self, *args)
    def has_key(self, *args): return _CTools.MapStringString_has_key(self, *args)
    def keys(self): return _CTools.MapStringString_keys(self)
    def values(self): return _CTools.MapStringString_values(self)
    def items(self): return _CTools.MapStringString_items(self)
    def __contains__(self, *args): return _CTools.MapStringString___contains__(self, *args)
    def key_iterator(self): return _CTools.MapStringString_key_iterator(self)
    def value_iterator(self): return _CTools.MapStringString_value_iterator(self)
    def __setitem__(self, *args): return _CTools.MapStringString___setitem__(self, *args)
    def asdict(self): return _CTools.MapStringString_asdict(self)
    def __init__(self, *args): 
        this = _CTools.new_MapStringString(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _CTools.MapStringString_empty(self)
    def size(self): return _CTools.MapStringString_size(self)
    def clear(self): return _CTools.MapStringString_clear(self)
    def swap(self, *args): return _CTools.MapStringString_swap(self, *args)
    def get_allocator(self): return _CTools.MapStringString_get_allocator(self)
    def begin(self): return _CTools.MapStringString_begin(self)
    def end(self): return _CTools.MapStringString_end(self)
    def rbegin(self): return _CTools.MapStringString_rbegin(self)
    def rend(self): return _CTools.MapStringString_rend(self)
    def count(self, *args): return _CTools.MapStringString_count(self, *args)
    def erase(self, *args): return _CTools.MapStringString_erase(self, *args)
    def find(self, *args): return _CTools.MapStringString_find(self, *args)
    def lower_bound(self, *args): return _CTools.MapStringString_lower_bound(self, *args)
    def upper_bound(self, *args): return _CTools.MapStringString_upper_bound(self, *args)
    __swig_destroy__ = _CTools.delete_MapStringString
    __del__ = lambda self : None;
MapStringString_swigregister = _CTools.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

class MapStringDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _CTools.MapStringDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CTools.MapStringDouble___nonzero__(self)
    def __bool__(self): return _CTools.MapStringDouble___bool__(self)
    def __len__(self): return _CTools.MapStringDouble___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _CTools.MapStringDouble___getitem__(self, *args)
    def __delitem__(self, *args): return _CTools.MapStringDouble___delitem__(self, *args)
    def has_key(self, *args): return _CTools.MapStringDouble_has_key(self, *args)
    def keys(self): return _CTools.MapStringDouble_keys(self)
    def values(self): return _CTools.MapStringDouble_values(self)
    def items(self): return _CTools.MapStringDouble_items(self)
    def __contains__(self, *args): return _CTools.MapStringDouble___contains__(self, *args)
    def key_iterator(self): return _CTools.MapStringDouble_key_iterator(self)
    def value_iterator(self): return _CTools.MapStringDouble_value_iterator(self)
    def __setitem__(self, *args): return _CTools.MapStringDouble___setitem__(self, *args)
    def asdict(self): return _CTools.MapStringDouble_asdict(self)
    def __init__(self, *args): 
        this = _CTools.new_MapStringDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _CTools.MapStringDouble_empty(self)
    def size(self): return _CTools.MapStringDouble_size(self)
    def clear(self): return _CTools.MapStringDouble_clear(self)
    def swap(self, *args): return _CTools.MapStringDouble_swap(self, *args)
    def get_allocator(self): return _CTools.MapStringDouble_get_allocator(self)
    def begin(self): return _CTools.MapStringDouble_begin(self)
    def end(self): return _CTools.MapStringDouble_end(self)
    def rbegin(self): return _CTools.MapStringDouble_rbegin(self)
    def rend(self): return _CTools.MapStringDouble_rend(self)
    def count(self, *args): return _CTools.MapStringDouble_count(self, *args)
    def erase(self, *args): return _CTools.MapStringDouble_erase(self, *args)
    def find(self, *args): return _CTools.MapStringDouble_find(self, *args)
    def lower_bound(self, *args): return _CTools.MapStringDouble_lower_bound(self, *args)
    def upper_bound(self, *args): return _CTools.MapStringDouble_upper_bound(self, *args)
    __swig_destroy__ = _CTools.delete_MapStringDouble
    __del__ = lambda self : None;
MapStringDouble_swigregister = _CTools.MapStringDouble_swigregister
MapStringDouble_swigregister(MapStringDouble)

class CToolClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CToolClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CToolClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["StringDict"] = _CTools.CToolClass_StringDict_set
    __swig_getmethods__["StringDict"] = _CTools.CToolClass_StringDict_get
    if _newclass:StringDict = _swig_property(_CTools.CToolClass_StringDict_get, _CTools.CToolClass_StringDict_set)
    __swig_setmethods__["IntDict"] = _CTools.CToolClass_IntDict_set
    __swig_getmethods__["IntDict"] = _CTools.CToolClass_IntDict_get
    if _newclass:IntDict = _swig_property(_CTools.CToolClass_IntDict_get, _CTools.CToolClass_IntDict_set)
    __swig_setmethods__["DoubleDict"] = _CTools.CToolClass_DoubleDict_set
    __swig_getmethods__["DoubleDict"] = _CTools.CToolClass_DoubleDict_get
    if _newclass:DoubleDict = _swig_property(_CTools.CToolClass_DoubleDict_get, _CTools.CToolClass_DoubleDict_set)
    def setDicts(self, *args): return _CTools.CToolClass_setDicts(self, *args)
    def __init__(self): 
        this = _CTools.new_CToolClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CTools.delete_CToolClass
    __del__ = lambda self : None;
CToolClass_swigregister = _CTools.CToolClass_swigregister
CToolClass_swigregister(CToolClass)

class doublecomplex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublecomplex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublecomplex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _CTools.doublecomplex_r_set
    __swig_getmethods__["r"] = _CTools.doublecomplex_r_get
    if _newclass:r = _swig_property(_CTools.doublecomplex_r_get, _CTools.doublecomplex_r_set)
    __swig_setmethods__["i"] = _CTools.doublecomplex_i_set
    __swig_getmethods__["i"] = _CTools.doublecomplex_i_get
    if _newclass:i = _swig_property(_CTools.doublecomplex_i_get, _CTools.doublecomplex_i_set)
    def __init__(self): 
        this = _CTools.new_doublecomplex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CTools.delete_doublecomplex
    __del__ = lambda self : None;
doublecomplex_swigregister = _CTools.doublecomplex_swigregister
doublecomplex_swigregister(doublecomplex)


def Complex(*args):
  return _CTools.Complex(*args)
Complex = _CTools.Complex

def Cadd(*args):
  return _CTools.Cadd(*args)
Cadd = _CTools.Cadd

def Csub(*args):
  return _CTools.Csub(*args)
Csub = _CTools.Csub

def Cmul(*args):
  return _CTools.Cmul(*args)
Cmul = _CTools.Cmul

def Cdiv(*args):
  return _CTools.Cdiv(*args)
Cdiv = _CTools.Cdiv

def Conjg(*args):
  return _CTools.Conjg(*args)
Conjg = _CTools.Conjg

def Csqrt(*args):
  return _CTools.Csqrt(*args)
Csqrt = _CTools.Csqrt

def Cexp(*args):
  return _CTools.Cexp(*args)
Cexp = _CTools.Cexp

def RCmul(*args):
  return _CTools.RCmul(*args)
RCmul = _CTools.RCmul

def Cabs(*args):
  return _CTools.Cabs(*args)
Cabs = _CTools.Cabs

def Carg(*args):
  return _CTools.Carg(*args)
Carg = _CTools.Carg

def openFile(*args):
  return _CTools.openFile(*args)
openFile = _CTools.openFile

def closeFile(*args):
  return _CTools.closeFile(*args)
closeFile = _CTools.closeFile

def getWord(*args):
  return _CTools.getWord(*args)
getWord = _CTools.getWord

def readUntilLineEnd(*args):
  return _CTools.readUntilLineEnd(*args)
readUntilLineEnd = _CTools.readUntilLineEnd

def readUntilFileEnd(*args):
  return _CTools.readUntilFileEnd(*args)
readUntilFileEnd = _CTools.readUntilFileEnd

def getLinesStart(*args):
  return _CTools.getLinesStart(*args)
getLinesStart = _CTools.getLinesStart

def goToLine(*args):
  return _CTools.goToLine(*args)
goToLine = _CTools.goToLine

def goToLastLine(*args):
  return _CTools.goToLastLine(*args)
goToLastLine = _CTools.goToLastLine

def getNLines(*args):
  return _CTools.getNLines(*args)
getNLines = _CTools.getNLines

def updateRanSeed(*args):
  return _CTools.updateRanSeed(*args)
updateRanSeed = _CTools.updateRanSeed

def ran1(*args):
  return _CTools.ran1(*args)
ran1 = _CTools.ran1

def gasdev(*args):
  return _CTools.gasdev(*args)
gasdev = _CTools.gasdev

def expdev(*args):
  return _CTools.expdev(*args)
expdev = _CTools.expdev

def gamdev(*args):
  return _CTools.gamdev(*args)
gamdev = _CTools.gamdev

def factorial(*args):
  return _CTools.factorial(*args)
factorial = _CTools.factorial

def arrangement(*args):
  return _CTools.arrangement(*args)
arrangement = _CTools.arrangement

def combinaison(*args):
  return _CTools.combinaison(*args)
combinaison = _CTools.combinaison

def printVecFloat(*args):
  return _CTools.printVecFloat(*args)
printVecFloat = _CTools.printVecFloat

def printVecInt(*args):
  return _CTools.printVecInt(*args)
printVecInt = _CTools.printVecInt

def printArrayFloat(*args):
  return _CTools.printArrayFloat(*args)
printArrayFloat = _CTools.printArrayFloat

def printArrayInt(*args):
  return _CTools.printArrayInt(*args)
printArrayInt = _CTools.printArrayInt
class isEqualValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, isEqualValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, isEqualValue, name)
    __repr__ = _swig_repr
    def __init__(self, _value=0): 
        this = _CTools.new_isEqualValue(_value)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _CTools.isEqualValue___call__(self, *args)
    __swig_destroy__ = _CTools.delete_isEqualValue
    __del__ = lambda self : None;
isEqualValue_swigregister = _CTools.isEqualValue_swigregister
isEqualValue_swigregister(isEqualValue)

class isEven(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, isEven, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, isEven, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _CTools.isEven___call__(self, *args)
    def __init__(self): 
        this = _CTools.new_isEven()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CTools.delete_isEven
    __del__ = lambda self : None;
isEven_swigregister = _CTools.isEven_swigregister
isEven_swigregister(isEven)

class isOdd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, isOdd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, isOdd, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _CTools.isOdd___call__(self, *args)
    def __init__(self): 
        this = _CTools.new_isOdd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CTools.delete_isOdd
    __del__ = lambda self : None;
isOdd_swigregister = _CTools.isOdd_swigregister
isOdd_swigregister(isOdd)

class meanClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, meanClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, meanClass, name)
    __repr__ = _swig_repr
    def __init__(self, _vecSize=0): 
        this = _CTools.new_meanClass(_vecSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["meanValue"] = _CTools.meanClass_meanValue_set
    __swig_getmethods__["meanValue"] = _CTools.meanClass_meanValue_get
    if _newclass:meanValue = _swig_property(_CTools.meanClass_meanValue_get, _CTools.meanClass_meanValue_set)
    __swig_setmethods__["vecSize"] = _CTools.meanClass_vecSize_set
    __swig_getmethods__["vecSize"] = _CTools.meanClass_vecSize_get
    if _newclass:vecSize = _swig_property(_CTools.meanClass_vecSize_get, _CTools.meanClass_vecSize_set)
    def __call__(self, *args): return _CTools.meanClass___call__(self, *args)
    __swig_destroy__ = _CTools.delete_meanClass
    __del__ = lambda self : None;
meanClass_swigregister = _CTools.meanClass_swigregister
meanClass_swigregister(meanClass)


def meanValue(*args):
  return _CTools.meanValue(*args)
meanValue = _CTools.meanValue

def stdValue(*args):
  return _CTools.stdValue(*args)
stdValue = _CTools.stdValue

def meanVec(*args):
  return _CTools.meanVec(*args)
meanVec = _CTools.meanVec

def stdVec(*args):
  return _CTools.stdVec(*args)
stdVec = _CTools.stdVec

def findAll_whereValue(*args):
  return _CTools.findAll_whereValue(*args)
findAll_whereValue = _CTools.findAll_whereValue

def findAll_even(*args):
  return _CTools.findAll_even(*args)
findAll_even = _CTools.findAll_even

def getPermutations(*args):
  return _CTools.getPermutations(*args)
getPermutations = _CTools.getPermutations

def getRowFromVecVec(*args):
  return _CTools.getRowFromVecVec(*args)
getRowFromVecVec = _CTools.getRowFromVecVec

def getColFromVecVec(*args):
  return _CTools.getColFromVecVec(*args)
getColFromVecVec = _CTools.getColFromVecVec

def getRowsFromVecVec(*args):
  return _CTools.getRowsFromVecVec(*args)
getRowsFromVecVec = _CTools.getRowsFromVecVec

def getVecVecFromVecVec(*args):
  return _CTools.getVecVecFromVecVec(*args)
getVecVecFromVecVec = _CTools.getVecVecFromVecVec

def getCombinaisons(*args):
  return _CTools.getCombinaisons(*args)
getCombinaisons = _CTools.getCombinaisons

def whichIndx(*args):
  return _CTools.whichIndx(*args)
whichIndx = _CTools.whichIndx

def vecSub(*args):
  return _CTools.vecSub(*args)
vecSub = _CTools.vecSub

def vecFromSub(*args):
  return _CTools.vecFromSub(*args)
vecFromSub = _CTools.vecFromSub

def vecMul(*args):
  return _CTools.vecMul(*args)
vecMul = _CTools.vecMul

def vecVecAdd(*args):
  return _CTools.vecVecAdd(*args)
vecVecAdd = _CTools.vecVecAdd

def range(*args):
  return _CTools.range(*args)
range = _CTools.range

def arange(*args):
  return _CTools.arange(*args)
arange = _CTools.arange

def vecOnes(*args):
  return _CTools.vecOnes(*args)
vecOnes = _CTools.vecOnes

def vecZeros(*args):
  return _CTools.vecZeros(*args)
vecZeros = _CTools.vecZeros

def vecVecOnes(*args):
  return _CTools.vecVecOnes(*args)
vecVecOnes = _CTools.vecVecOnes

def vecVecZeros(*args):
  return _CTools.vecVecZeros(*args)
vecVecZeros = _CTools.vecVecZeros
# This file is compatible with both classic and new-style classes.


