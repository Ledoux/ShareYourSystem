// Generated by CoffeeScript 1.9.2

/*

  Import modules
 */

(function() {
  var MainObject, browserify, cjsx, cjsxDir, cjsxfy, coffee, coffeeify, concat, connect, cssSources, findPath, gulp, gutil, htmlSources, importCss, lodash, sass, sassSources, scriptSources, source, uglify, watchify;

  gulp = require('gulp');

  gutil = require('gulp-util');

  sass = require('gulp-sass');

  watchify = require('watchify');

  lodash = require('lodash');

  browserify = require('browserify');

  source = require('vinyl-source-stream');

  cjsx = require('gulp-cjsx');

  coffee = require('gulp-coffee');

  coffeeify = require('coffeeify');

  cjsxfy = require('coffee-reactify');

  connect = require('gulp-connect');

  uglify = require('gulp-uglify');

  concat = require('gulp-concat');

  importCss = require('gulp-import-css');


  /*
  
    Say where to watch and to write
   */

  cssSources = ['styles/*.css'];

  sassSources = ['styles/*.scss'];

  htmlSources = ['**/*.html'];

  scriptSources = ['scripts/**/*.cjsx', 'scripts/**/*.coffee', 'scripts/**/*.js'];

  MainObject = {
    entries: ['./scripts/main.js'],
    extensions: ['.js', '.coffee', '.cjsx']
  };


  /*
  
    Define change tasks
   */

  gulp.task('log', function() {
    return gutil.log('== My First Task ==');
  });

  gulp.task('copy', function() {
    return gulp.src('index.html').pipe(gulp.dest(assetsDir));
  });

  gulp.task('sass', function() {
    return gulp.src(sassSources).pipe(sass({
      style: 'expanded'
    })).on('error', gutil.log).pipe(gulp.dest('assets')).pipe(connect.reload());
  });

  gulp.task('css', function() {
    return gulp.src(cssSources).pipe(importCss()).pipe(gulp.dest('assets')).pipe(connect.reload());
  });

  cjsxDir = null;

  findPath = function(file, t) {
    cjsxDir = file.path;
    return console.log(cssDir);
  };

  gulp.task('cjsx', function() {
    return gulp.src(scriptSources).pipe(tap(findPath)).pipe(cjsx({
      bare: true
    }).on('error', gutil.log)).pipe(gulp.dest(cjsxDir));
  });

  gulp.task('html', function() {
    return gulp.src(htmlSources).pipe(connect.reload());
  });

  gulp.task('coffeeGulp', function() {
    return gulp.src(['gulpfile.coffee']).pipe(coffee({
      bare: true
    }).on('error', gutil.log)).pipe(gulp.dest(""));
  });

  gulp.task('vendor_min', function() {
    return gulp.src(outputVendorPath).pipe(uglify()).pipe(concat('vendor.min.js')).pipe(gulp.dest('assets'));
  });

  gulp.task('vendor_bundle', function() {
    return browserify(['./node_modules/react/react.js', './node_modules/lodash/lodash.js']).bundle().pipe(source('vendor.js')).pipe(gulp.dest('assets'));
  });

  gulp.task('main_bundle', function() {
    var MainBrowserify, MainWatchify;
    MainBrowserify = browserify(lodash.assign({}, watchify.args, MainObject));
    return MainWatchify = watchify(MainBrowserify).transform(cjsxfy).bundle().pipe(source('buffer.js')).pipe(gulp.dest('assets')).pipe(connect.reload());
  });

  gulp.task('main_min', function() {
    return gulp.src(['assets/buffer.js']).pipe(uglify()).pipe(concat('main.min.js')).pipe(gulp.dest('assets')).pipe(connect.reload());
  });


  /*
  
    Define watch connect
   */

  gulp.task('watch', function() {
    gulp.watch(cssSources, ['css']);
    gulp.watch(scriptSources, ['main_bundle']);
    return gulp.watch(htmlSources, ['html']);
  });

  gulp.task('connect', function() {
    return connect.server({
      root: '.',
      livereload: true
    });
  });


  /*
  
    Define global tasks
   */

  gulp.task('default', ['html', 'main_bundle', 'css', 'connect', 'watch']);

}).call(this);
