// Generated by CoffeeScript 1.9.2

/*
	Manager Class
 */
var ManagerClass, Teamer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

console.log("import Manager \n");

Teamer = require('../Teamer/src.js');

ManagerClass = (function(superClass) {
  var ManagedParentVariable, ManagementObject;

  extend(ManagerClass, superClass);

  function ManagerClass() {
    this.manage = bind(this.manage, this);
    return ManagerClass.__super__.constructor.apply(this, arguments);
  }

  ManagementObject = {};

  ManagedParentVariable = null;

  ManagerClass.prototype.manage = function(ManagingKeyStr, ManagingValueVariable) {
    console.log(['ManagingKeyStr is ' + ManagingKeyStr, 'ManagingValueVariable is ' + ManagingValueVariable]);
    ManagingValueVariable.ManagedParentVariable = this;
    ManagementObject[ManagingKeyStr] = ManagingValueVariable;
    console.log(ManagementObject);
    return this;
  };

  return ManagerClass;

})(Teamer.TeamerClass);

if (GLOBAL.SideStr === 'server') {
  exports.ManagerClass = ManagerClass;
}
